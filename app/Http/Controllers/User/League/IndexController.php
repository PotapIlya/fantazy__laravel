<?php

namespace App\Http\Controllers\User\League;

use App\Http\Controllers\Controller;
use App\Http\Controllers\User\UserBaseController;
use App\Models\League\League;
use App\Models\Users\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;

class IndexController extends UserBaseController
{
    public function __constructor()
    {
        parent::__constructor(); // TODO: Change the autogenerated stub
    }

    /**
     * @return \Illuminate\Contracts\Foundation\Application|\Illuminate\Contracts\View\Factory|\Illuminate\Contracts\View\View
     */
    public function index()
    {
        // юзер вступил в лигу
        $userLeagues = User::with('come_league')->findOrFail(\Auth::id())->come_league;

        // все лиги, кроме тех, в которые вступил юзер
        $leagues = League::whereNotIn('id', $userLeagues->pluck('id'))->get();


        return view('groups.user.pages.league.index', compact('userLeagues', 'leagues'));
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        //
    }

    public function addUser(Request $request, int $id)
    {
        // ДОБАВИТЬ:
        // проверить мб юзер уже есть


        $league = League::findOrFail($id);
        $user = \Auth::user();

        if ( !is_null($league->password) )
        {
            if (Hash::check($request->password, $league->password))
            {
               return $this->addUserBd($user, $id);
            } else{
                return 'error password';
            }
        }
        else{
            return $this->addUserBd($user, $id);
        }
    }
    private function addUserBd(object $user, int $id)
    {
        if ($user->come_league()->attach($id) === null)
        {
            return redirect()->back();
        } else{
            abort(500);
        }
    }

    /**
     * @param Request $request
     * @param int $id
     * @return \Illuminate\Http\RedirectResponse
     */
    public function destroyUser(Request $request, int $id)
    {
        $user = \Auth::user();
        if ($user->come_league()->detach($id))
        {
            return redirect()->route('user.league.index');
        } else{
            abort(500);
        }
    }

    /**
     * @param Request $request
     * @return \Illuminate\Http\RedirectResponse
     */
    public function store(Request $request)
    {
        $data = $request->all();
        if ($data['password']){
            $data['password'] = Hash::make($data['password']);
        }

        $create =  League::create([
            'user_id' => \Auth::id(),
            'name' => $data['name'],
            'password' => $data['password'],
        ]);
        if ($create){
            return $this->addUserBd(\Auth::user(), $create->id);
        } else{
            abort(500);
        }
    }


    /**
     * @param int $id
     * @return \Illuminate\Contracts\Foundation\Application|\Illuminate\Contracts\View\Factory|\Illuminate\Contracts\View\View
     */
    public function show(int $id)
    {
        $statusComeForm = false;
        $statusDestroyForm = false;
        $item = League::with('users')->findOrFail($id);

        if (!count($item->users->where('id', \Auth::id())))
        {
            $statusComeForm = true;
        }

        if ( $item->user_id === \Auth::id() )
        {
            $statusDestroyForm = true;
        }

        return view('groups.user.pages.league.show', compact('item', 'statusComeForm', 'id', 'statusDestroyForm'));
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        //
    }

    /**
     * @param int $id
     * @return \Illuminate\Http\RedirectResponse
     */
    public function destroy(int $id)
    {
        if ( League::destroy($id) )
        {
            return redirect()->route('user.league.index');
        }
        else{
            abort(500);
        }
    }
}
